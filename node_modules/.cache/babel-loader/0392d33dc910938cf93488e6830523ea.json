{"ast":null,"code":"const express = require('express');\n\nconst cors = require('cors');\n\nconst mongoose = require('mongoose');\n\nrequire('dotenv').config();\n\nconst app = express();\nconst port = process.env.PORT || 5000; //Import PythonShell module.\n\nconst {\n  PythonShell\n} = require('python-shell');\n\napp.use(cors());\napp.use(express.json());\nconst uri = process.env.ATLAS_URI;\nmongoose.connect(uri, {\n  useNewUrlParser: true,\n  useCreateIndex: true\n});\nconst connection = mongoose.connection;\nconnection.once('open', () => {\n  console.log(\"MongoDB database connection established successfully\");\n}); // placeholders\n\nvar disaster = \"Cancer\";\nvar state = \"California\";\napp.get(\"/\", (req, res, next) => {\n  //Here are the option object in which arguments can be passed for the python_test.js.\n  let options = {\n    mode: 'text',\n    pythonOptions: ['-u'],\n    // get print results in real-time\n    args: [disaster, state] //Argument (sys.argv[1])\n\n  };\n  PythonShell.run('FindDisease.py', options, function (err, result) {\n    if (err) throw err;\n    res.send(result.toString());\n  });\n});\napp.listen(port, () => {\n  console.log(\"Server is running on Port: \" + port);\n});","map":{"version":3,"sources":["D:/Users/pokec/Downloads/Bad-Day/src/Backend/server.js"],"names":["express","require","cors","mongoose","config","app","port","process","env","PORT","PythonShell","use","json","uri","ATLAS_URI","connect","useNewUrlParser","useCreateIndex","connection","once","console","log","disaster","state","get","req","res","next","options","mode","pythonOptions","args","run","err","result","send","toString","listen"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAE,UAAF,CAAxB;;AAEAA,OAAO,CAAC,QAAD,CAAP,CAAkBG,MAAlB;;AAEA,MAAMC,GAAG,GAAGL,OAAO,EAAnB;AACA,MAAMM,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC,C,CACA;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAeT,OAAO,CAAC,cAAD,CAA5B;;AAEAI,GAAG,CAACM,GAAJ,CAAQT,IAAI,EAAZ;AACAG,GAAG,CAACM,GAAJ,CAAQX,OAAO,CAACY,IAAR,EAAR;AAEA,MAAMC,GAAG,GAAGN,OAAO,CAACC,GAAR,CAAYM,SAAxB;AACAX,QAAQ,CAACY,OAAT,CAAiBF,GAAjB,EAAsB;AAAEG,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,cAAc,EAAE;AAAzC,CAAtB;AACA,MAAMC,UAAU,GAAGf,QAAQ,CAACe,UAA5B;AACAA,UAAU,CAACC,IAAX,CAAgB,MAAhB,EAAwB,MAAM;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ;AACH,CAFD,E,CAIA;;AACA,IAAIC,QAAQ,GAAG,QAAf;AACA,IAAIC,KAAK,GAAG,YAAZ;AAEAlB,GAAG,CAACmB,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAkB;AAC3B;AACA,MAAIC,OAAO,GAAG;AACVC,IAAAA,IAAI,EAAE,MADI;AAEVC,IAAAA,aAAa,EAAE,CAAC,IAAD,CAFL;AAEa;AACvBC,IAAAA,IAAI,EAAE,CAACT,QAAD,EAAWC,KAAX,CAHI,CAGc;;AAHd,GAAd;AAMAb,EAAAA,WAAW,CAACsB,GAAZ,CAAgB,gBAAhB,EAAkCJ,OAAlC,EAA2C,UAAUK,GAAV,EAAeC,MAAf,EAAsB;AAC3D,QAAID,GAAJ,EAAS,MAAMA,GAAN;AACTP,IAAAA,GAAG,CAACS,IAAJ,CAASD,MAAM,CAACE,QAAP,EAAT;AACL,GAHD;AAIH,CAZD;AAeA/B,GAAG,CAACgC,MAAJ,CAAW/B,IAAX,EAAiB,MAAM;AACnBc,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgCf,IAA5C;AACH,CAFD","sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst mongoose = require ('mongoose');\r\n\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 5000;\r\n//Import PythonShell module.\r\nconst {PythonShell} =require('python-shell');\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst uri = process.env.ATLAS_URI;\r\nmongoose.connect(uri, { useNewUrlParser: true, useCreateIndex: true});\r\nconst connection = mongoose.connection;\r\nconnection.once('open', () => {\r\n    console.log(\"MongoDB database connection established successfully\");\r\n})\r\n\r\n// placeholders\r\nvar disaster = \"Cancer\"\r\nvar state = \"California\"\r\n\r\napp.get(\"/\", (req, res, next)=>{\r\n    //Here are the option object in which arguments can be passed for the python_test.js.\r\n    let options = {\r\n        mode: 'text',\r\n        pythonOptions: ['-u'], // get print results in real-time\r\n        args: [disaster, state] //Argument (sys.argv[1])\r\n    };\r\n  \r\n    PythonShell.run('FindDisease.py', options, function (err, result){\r\n          if (err) throw err;\r\n          res.send(result.toString())\r\n    });\r\n});\r\n\r\n\r\napp.listen(port, () => {\r\n    console.log(\"Server is running on Port: \" + port);\r\n});\r\n\r\n"]},"metadata":{},"sourceType":"module"}